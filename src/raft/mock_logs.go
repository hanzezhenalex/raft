// Code generated by MockGen. DO NOT EDIT.
// Source: ./logs.go

// Package raft is a generated GoMock package.
package raft

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogStore is a mock of LogStore interface.
type MockLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockLogStoreMockRecorder
}

// MockLogStoreMockRecorder is the mock recorder for MockLogStore.
type MockLogStoreMockRecorder struct {
	mock *MockLogStore
}

// NewMockLogStore creates a new mock instance.
func NewMockLogStore(ctrl *gomock.Controller) *MockLogStore {
	mock := &MockLogStore{ctrl: ctrl}
	mock.recorder = &MockLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogStore) EXPECT() *MockLogStoreMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockLogStore) Append(logs ...Log) int {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range logs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(int)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockLogStoreMockRecorder) Append(logs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockLogStore)(nil).Append), logs...)
}

// BuildSnapshot mocks base method.
func (m *MockLogStore) BuildSnapshot(index int, snapshot []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildSnapshot", index, snapshot)
}

// BuildSnapshot indicates an expected call of BuildSnapshot.
func (mr *MockLogStoreMockRecorder) BuildSnapshot(index, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockLogStore)(nil).BuildSnapshot), index, snapshot)
}

// Get mocks base method.
func (m *MockLogStore) Get(left, right int) GetLogsResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", left, right)
	ret0, _ := ret[0].(GetLogsResult)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockLogStoreMockRecorder) Get(left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLogStore)(nil).Get), left, right)
}

// GetState mocks base method.
func (m *MockLogStore) GetState() LogState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(LogState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockLogStoreMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockLogStore)(nil).GetState))
}

// Length mocks base method.
func (m *MockLogStore) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockLogStoreMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockLogStore)(nil).Length))
}

// Trim mocks base method.
func (m *MockLogStore) Trim(end int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Trim", end)
}

// Trim indicates an expected call of Trim.
func (mr *MockLogStoreMockRecorder) Trim(end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trim", reflect.TypeOf((*MockLogStore)(nil).Trim), end)
}
